package net.webpdf.ant.task;

import net.webpdf.ant.task.files.IterativeTaskFileMap;

import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class bundles all parameters set in the top level webPDF task container.
 */
public class TaskConfiguration {
    //TODO: Make use of authorization parameters when implemented in WS CLIENT.
    private final IterativeTaskFileMap taskFiles;
    private String serverURL = "http://localhost:8080//webPDF";
    private String userName = "admin";
    private String userPassword = "admin";
    private boolean serverProtected = false;
    private boolean useAuthorization = false;
    private boolean useMTOMFeature = true;
    private boolean failOnError = true;

    /**
     * Shall create a new task configuration, that shall be referenced by all sub tasks.
     */
    public TaskConfiguration() {
        this.taskFiles = new IterativeTaskFileMap();
    }

    /**
     * Sets the URL of the webPDF server.
     *
     * @param serverURl The url of the webPDF server.
     */
    public void setServerUrl(String serverURl) {
        this.serverURL = serverURl;
    }

    /**
     * Returns the URL of the webPDF server.
     *
     * @return The URL of the webPDF server.
     * @throws MalformedURLException Is thrown if the given server url is invalid.
     */
    public URL getServerURL() throws MalformedURLException {
        return new URL(serverURL);
    }

    /**
     * When set to true all requests to the webPDF server must contain at least a basic authentication header.
     *
     * @param serverProtected Set this to true, to include a basic authorization header in requests.
     */
    public void setServerProtected(boolean serverProtected) {
        this.serverProtected = serverProtected;
    }

    /**
     * Returns true, if all requests to the webPDF server must contain at least a basic authentication header.
     *
     * @return Returns true, if all requests to the webPDF server must contain at least a basic authentication header.
     */
    boolean isServerProtected() {
        return serverProtected;
    }

    /**
     * When set to true all requests to the webPDF must contain a qualified authentication header providing an
     * user authentication.
     *
     * @param useAuthorization Set to true, to include a qualified user authentication authorization header in requests.
     */
    public void setUseAuthorization(boolean useAuthorization) {
        this.useAuthorization = useAuthorization;
    }

    /**
     * Returns true, if all requests to the webPDF server must contain a qualified authentication header providing an
     * user authentication.
     *
     * @return Returns true, if all requests to the webPDF must contain a qualified authentication header providing an
     * user authentication.
     */
    boolean isUseAuthorization() {
        return useAuthorization;
    }

    /**
     * When set to true all SOAP requests to the webPDF server shall be optimized according to the MTOM specification.
     *
     * @param useMTOMFeature Set to true, to optimize all webservice requests.
     */
    public void setUseMTOMFeature(boolean useMTOMFeature) {
        this.useMTOMFeature = useMTOMFeature;
    }

    /**
     * Returns true, if all SOAP requests to the webPDF server shall be optimized according to the MTOM specification.
     *
     * @return Returns true, if all SOAP requests to the webPDF server shall be optimized according to the MTOM specification.
     */
    boolean isUseMTOMFeature() {
        return useMTOMFeature;
    }

    /**
     * Sets the user name used for the user authentication in authorization headers.
     *
     * @param userName The user name used for the user authentication in authorization headers.
     */
    public void setUserName(String userName) {
        this.userName = userName;
    }

    /**
     * Returns the user name used for the user authentication in authorization headers.
     *
     * @return Returns the user name used for the user authentication in authorization headers.
     */
    String getUserName() {
        return userName;
    }

    /**
     * Sets the password used for the user authentication in authorization headers.
     *
     * @param userPassword The password used for the user authentication in authorization headers.
     */
    public void setUserPassword(String userPassword) {
        this.userPassword = userPassword;
    }

    /**
     * Returns the password used for the user authentication in authorization headers.
     *
     * @return Returns the password used for the user authentication in authorization headers.
     */
    String getUserPassword() {
        return userPassword;
    }

    /**
     * If set to true, a failing sub task shall instantly interrupt the execution of the webPDF task and shall prevent
     * other sub tasks from being executed. (DEFAULT is true)
     *
     * @param failOnError True to prevent further execution when a task has failed.
     */
    public void setFailOnError(boolean failOnError) {
        this.failOnError = failOnError;
    }

    /**
     * If this returns true, then a failing task must interrupt the currently executed webPDF task and shall prevent
     * other sub tasks from being executed.
     *
     * @return True must lead to a total failure, if a sub task fails.
     */
    public boolean isFailOnError() {
        return failOnError;
    }

    /**
     * The returned TaskFileCollection shall contain all files the current webPDf task shall be executed for.
     *
     * @return A collection of all files, that the current webPDF task shall be executed for.
     */
    public IterativeTaskFileMap getTaskFiles() {
        return taskFiles;
    }
}
