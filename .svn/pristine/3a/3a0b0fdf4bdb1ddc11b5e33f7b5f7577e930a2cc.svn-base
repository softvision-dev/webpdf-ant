package net.webpdf.ant.task;

import net.webpdf.ant.task.files.IterativeTaskFile;
import net.webpdf.ant.task.logging.AntLogger;
import net.webpdf.ant.task.variable.VariableMap;
import org.apache.tools.ant.BuildException;

/**
 * An implementing class shall provide all mechanisms for a containing parent task to initialize and execute it's children.
 */
public interface TaskIntf {

    /**
     * Called by the project to let the task do its work. This method may be
     * called more than once, if the task is invoked more than once.
     * For example,
     * if target1 and target2 both depend on target3, then running
     * "ant target1 target2" will run all tasks in target3 twice.
     *
     * @throws BuildException if something goes wrong with the build.
     */
    void execute() throws BuildException;

    /**
     * Sets the configuration container managing the iterative file progression in between the encapsulated tasks and
     * sub tasks.
     *
     * @param files The file container this task shall be using.
     */
    void setFiles(IterativeTaskFile files);

    /**
     * Returns the container managing the iterative file progression of this task.
     *
     * @return The file container this task is currently using.
     */
    IterativeTaskFile getFiles();

    /**
     * Passes the top level task configuration on to this sub task.
     *
     * @param taskConfiguration The task configuration of the top level webPDF task.
     */
    void setTaskConfiguration(TaskConfiguration taskConfiguration);

    /**
     * Returns the top level task configuration of this sub task.
     *
     * @return The task configuration of the containing top level webPDF task.
     */
    TaskConfiguration getTaskConfiguration();

    /**
     * When an exception occurs during the initialization of a webservice operation, the exception can be set as a
     * reason for a total failure. An implementing class should prevent any further execution, if this field is set.
     *
     * @param initializationFailure The exception causing the failure.
     */
    void setInitializationFailure(Throwable initializationFailure);

    /**
     * When an exception has occurred during the initialization of a webservice operation, the exception can be stored
     * in the underlying field. If this method returns a value other than null, the fruther execution of this task should
     * be prevented.
     *
     * @return The exception causing the failure.
     */
    Throwable getInitializationFailure();

    /**
     * When an exception has occurred during the initialization of a webservice operation, that prevents the further
     * execution of this task, this method shall return true.
     * If this method does return true, the further execution of this task should be prevented.
     *
     * @return The exception causing the failure.
     */
    boolean hasInitializationFailed();

    /**
     * Returns the variables used by this task.
     *
     * @return The variables used by this task.
     */
    VariableMap getVariables();

    /**
     * Returns the logger used by this task.
     *
     * @return The logger used by this task.
     */
    AntLogger getLogger();
}
